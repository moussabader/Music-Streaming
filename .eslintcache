[{"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\App.js":"1","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\pages\\Quizz.js":"2","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\Exit.js":"3","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\Round.js":"4","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\Option.js":"5","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\LyricsLoader.js":"6","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\Context.js":"7","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\reportWebVitals.js":"8"},{"size":619,"mtime":1612987067000,"results":"9","hashOfConfig":"10"},{"size":2548,"mtime":1612987067000,"results":"11","hashOfConfig":"10"},{"size":1708,"mtime":1612987067000,"results":"12","hashOfConfig":"10"},{"size":257,"mtime":1612987067000,"results":"13","hashOfConfig":"10"},{"size":1641,"mtime":1612987067000,"results":"14","hashOfConfig":"10"},{"size":300,"mtime":1612987067000,"results":"15","hashOfConfig":"10"},{"size":5914,"mtime":1651939731352,"results":"16","hashOfConfig":"10"},{"size":362,"mtime":1612987067000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"4f3ngd",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\App.js",["36","37","38","39","40","41","42"],"import React, { useState, useEffect, useContext } from \"react\"\nimport \"./App.css\"\n\nimport Home from \"./pages/Home\"\nimport Quizz from \"./pages/Quizz\"\nimport Over from \"./pages/Over\"\n\nimport { Context } from \"./Context\"\n\nfunction App() {\n  const { gameState, albums, setAlbums } = useContext(Context)\n\n  const [isGameStarted, setIsGameStarted] = useState(false)\n  const [selectedAlbum, setSelectedAlbum] = useState(null)\n\n  switch (gameState) {\n    case \"Home\":\n      return <Home />\n    case \"Quizz\":\n      return <Quizz />\n    case \"Over\":\n      return <Over />\n    default:\n      return null\n  }\n}\n\nexport default App\n","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\pages\\Quizz.js",[],"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\Exit.js",[],"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\Round.js",["43"],"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\Option.js",["44"],"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\components\\LyricsLoader.js",[],"C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\Context.js",["45","46","47","48","49"],"import React, { useState, useEffect } from \"react\"\n\nconst Context = React.createContext()\n\nfunction ContextProvider({ children }) {\n  const [gameState, setGameState] = useState(\"Home\")\n\n  const [albums, setAlbums] = useState([])\n  const [isAlbumsLoading, setIsAlbumsLoading] = useState(true)\n  const [selectedAlbum, setSelectedAlbum] = useState({})\n\n  const [songs, setSongs] = useState([])\n  const [options, setOptions] = useState([])\n  const [lyrics, setLyrics] = useState(\"\")\n\n  const [roundCount, setRoundCount] = useState(1)\n  const [correctCount, setCorrectCount] = useState(0)\n\n  const [retryRandomOptions, setRetryRandomOptions] = useState(0)\n  const [isLyricsLoading, setIsLyricsLoading] = useState(true)\n\n  const ARTIST = \"Taylor Swift\"\n  const artistFormated = ARTIST.split(\" \").join(\"_\")\n\n  const ROUNDS = 5\n\n  function startGame(album) {\n    setGameState(\"Quizz\")\n    setSelectedAlbum({\n      id: album.mbid,\n      name: album.name,\n      imgUrl: album.image[0][\"#text\"],\n    })\n    console.log(\"album seleccionado \", album.name)\n  }\n\n  const artistId = \"06HL4z0CvFAxyc27GXpf02\"\n\n  const api_key =\n    \"BQBRi0ia348QpSshxwPbcT1nEAZCpTDpjgQCdPnx11whTfquD-1DbcYIXDbGCY3uQayzs31XgFOZsgVeBkH0n8JZRRAovB8MO48v_6Ww4UgSQeAMokA8yvStn8WMmHpUtreuRX8q0vDDxClQSg\"\n\n  /* Get albums when mounted */\n  useEffect(() => {\n    fetch(\n      `https://ws.audioscrobbler.com/2.0/?method=artist.gettopalbums&artist=Taylor+Swift&api_key=7cdafb7ded210010decc01f3ba16f18a&format=json`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"albums \", data)\n        setAlbums(data.topalbums.album)\n        setIsAlbumsLoading(false)\n      })\n  }, [])\n\n  /* Get songs when an album is selected */\n  useEffect(() => {\n    if (selectedAlbum.id) {\n      const escapedAlbum = selectedAlbum.name.split(\" \").join(\"+\")\n      console.log(\"escapado \", escapedAlbum)\n      fetch(\n        `https://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=7cdafb7ded210010decc01f3ba16f18a&artist=Taylor+Swift&album=${escapedAlbum}&format=json`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          setSongs(data.album.tracks.track)\n          console.log(\"songs\", data.items)\n        })\n    }\n  }, [selectedAlbum])\n\n  /* Get random options when songs are fetched */\n  useEffect(() => {\n    console.log(\"starts randomOptions \", songs)\n    setIsLyricsLoading(true)\n\n    if (songs.length > 0) {\n      var randoms = []\n      while (randoms.length < 3) {\n        var r = Math.floor(Math.random() * songs.length)\n        if (randoms.indexOf(r) === -1) randoms.push(r)\n      }\n\n      console.log(\"RANDOMS \", randoms)\n\n      const initialOptions = [\n        { song: songs[randoms[0]].name, correct: true },\n        { song: songs[randoms[1]].name, correct: false },\n        { song: songs[randoms[2]].name, correct: false },\n      ]\n\n      let shuffledOptions = initialOptions\n      for (let i = shuffledOptions.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1))\n        ;[shuffledOptions[i], shuffledOptions[j]] = [\n          shuffledOptions[j],\n          shuffledOptions[i],\n        ]\n      }\n\n      setOptions(shuffledOptions)\n\n      console.log(\n        \"options \",\n        options,\n        \"la correcta \",\n        options.filter((opt) => opt.correct)\n      )\n    }\n  }, [songs, roundCount, retryRandomOptions])\n\n  /* Get random lyrics from the correct song */\n  useEffect(() => {\n    if (options.length > 0) {\n      setIsLyricsLoading(true)\n      const fetchLyrics = async () => {\n        const correctSong = options\n          .filter((opt) => opt.correct)[0]\n          .song.split(\" \")\n          .join(\"_\")\n        console.log(\"correcta\", correctSong)\n        const url = `https://api.lyrics.ovh/v1/${artistFormated}/${correctSong}`\n        try {\n          const res = await fetch(url)\n          const data = await res.json()\n          let lyricsPhrases = data.lyrics\n          if (lyricsPhrases == \"\") {\n            setRetryRandomOptions((prev) => prev + 1)\n            console.log(\"LYRICS VACIAS, REINTENTAR CON NUEVAS OPCIONES\")\n          } else {\n            setIsLyricsLoading(false)\n            lyricsPhrases = lyricsPhrases\n              .split(\"\\n\")\n              .filter((line) => line !== \"\")\n            console.log(lyricsPhrases)\n            const randomLine = Math.floor(\n              Math.random() * (lyricsPhrases.length - 1)\n            )\n            console.log(\n              \"line \",\n              randomLine,\n              \" line1 \",\n              lyricsPhrases[randomLine],\n              \" line2 \",\n              lyricsPhrases[randomLine + 1]\n            )\n            setLyrics([\n              lyricsPhrases[randomLine],\n              lyricsPhrases[randomLine + 1],\n            ])\n            console.log(\"laslyric\", lyrics)\n          }\n        } catch (err) {\n          console.error(err)\n          setRetryRandomOptions((prev) => prev + 1)\n        }\n      }\n      fetchLyrics()\n    }\n  }, [options])\n\n  function nextRound() {\n    roundCount < ROUNDS ? setRoundCount((prev) => prev + 1) : gameOver()\n    console.log(roundCount)\n  }\n  function gameOver() {\n    setGameState(\"Over\")\n  }\n\n  function restartGame() {\n    setGameState(\"Home\")\n    setSelectedAlbum({})\n    setSongs([])\n    setOptions([])\n    setLyrics(\"\")\n    setRoundCount(1)\n    setCorrectCount(0)\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ARTIST,\n        startGame,\n        gameState,\n        setGameState,\n        albums,\n        setAlbums,\n        isAlbumsLoading,\n        selectedAlbum,\n        songs,\n        setSongs,\n        options,\n        setOptions,\n        lyrics,\n        setLyrics,\n        restartGame,\n        nextRound,\n        roundCount,\n        ROUNDS,\n        correctCount,\n        setCorrectCount,\n        gameOver,\n        isLyricsLoading,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport { ContextProvider, Context }\n","C:\\Users\\RedBoy\\Esprit\\4TWIN\\Semester 2\\Pidev\\Projects\\taylor-guess-the-song-master\\src\\reportWebVitals.js",[],{"ruleId":"50","severity":1,"message":"51","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":36},{"ruleId":"50","severity":1,"message":"54","line":11,"column":22,"nodeType":"52","messageId":"53","endLine":11,"endColumn":28},{"ruleId":"50","severity":1,"message":"55","line":11,"column":30,"nodeType":"52","messageId":"53","endLine":11,"endColumn":39},{"ruleId":"50","severity":1,"message":"56","line":13,"column":10,"nodeType":"52","messageId":"53","endLine":13,"endColumn":23},{"ruleId":"50","severity":1,"message":"57","line":13,"column":25,"nodeType":"52","messageId":"53","endLine":13,"endColumn":41},{"ruleId":"50","severity":1,"message":"58","line":14,"column":10,"nodeType":"52","messageId":"53","endLine":14,"endColumn":23},{"ruleId":"50","severity":1,"message":"59","line":14,"column":25,"nodeType":"52","messageId":"53","endLine":14,"endColumn":41},{"ruleId":"50","severity":1,"message":"60","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":27},{"ruleId":"61","severity":1,"message":"62","line":15,"column":21,"nodeType":"63","messageId":"64","endLine":15,"endColumn":23},{"ruleId":"50","severity":1,"message":"65","line":37,"column":9,"nodeType":"52","messageId":"53","endLine":37,"endColumn":17},{"ruleId":"50","severity":1,"message":"66","line":39,"column":9,"nodeType":"52","messageId":"53","endLine":39,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":109,"column":6,"nodeType":"69","endLine":109,"endColumn":45,"suggestions":"70"},{"ruleId":"61","severity":1,"message":"62","line":126,"column":29,"nodeType":"63","messageId":"64","endLine":126,"endColumn":31},{"ruleId":"67","severity":1,"message":"71","line":159,"column":6,"nodeType":"69","endLine":159,"endColumn":15,"suggestions":"72"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'albums' is assigned a value but never used.","'setAlbums' is assigned a value but never used.","'isGameStarted' is assigned a value but never used.","'setIsGameStarted' is assigned a value but never used.","'selectedAlbum' is assigned a value but never used.","'setSelectedAlbum' is assigned a value but never used.","'useContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'artistId' is assigned a value but never used.","'api_key' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has missing dependencies: 'artistFormated' and 'lyrics'. Either include them or remove the dependency array.",["74"],{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [songs, roundCount, retryRandomOptions, options]",{"range":"79","text":"80"},"Update the dependencies array to be: [artistFormated, lyrics, options]",{"range":"81","text":"82"},[3317,3356],"[songs, roundCount, retryRandomOptions, options]",[4962,4971],"[artistFormated, lyrics, options]"]